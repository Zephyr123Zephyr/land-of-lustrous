package org.example.landoflustrous.model;

import java.util.EnumMap;
import java.util.Map;
import java.util.HashMap;

public class CarbonFootprint {
    private double totalEmission; // The total carbon emissions generated by the player
    private double max = 100.0; // Maximum carbon allowance for the user
    private double currentCarbonFootprint; // Current carbon footprint value of the user
    private Map<TrafficType, Double> transportCarbon; // Carbon consumption per unit distance of different transport methods

    // Constructor
    public CarbonFootprint(double max) {
        this.max = max;
        this.currentCarbonFootprint = 0.0; // Start with no carbon footprint
        this.totalEmission = 0.0;
        this.transportCarbon = new EnumMap<>(TrafficType.class);


        //Initialize carbon consumption per unit using enum
        for(TrafficType type: TrafficType.values()){
            this.transportCarbon.put(type, type.getCarbonPer());
        }

    }

    // Methods
    // Increases the carbon footprint based on the transport method and distance traveled
    public void consumeCarbon(String transportMethod, double distance) {
        Double carbonPerUnit = this.transportCarbon.get(transportMethod);
        if (carbonPerUnit != null) {
            double consumedCarbon = carbonPerUnit * distance;
            this.currentCarbonFootprint += consumedCarbon;
            this.totalEmission += consumedCarbon;

            // Ensure the current carbon footprint does not exceed the maximum allowed value
            if (this.currentCarbonFootprint > this.max) {
                this.currentCarbonFootprint = this.max;
            }
        } else {
            System.out.println("Unknown transport method: " + transportMethod);
        }
    }

    public void increase(double amount) {
        this.currentCarbonFootprint += amount;
        if (this.currentCarbonFootprint > this.max) {
            this.currentCarbonFootprint = this.max; // Ensuring it doesn't exceed the max limit
        }
    }

    // Gets the current carbon footprint value
    public double getValue() {
        return this.currentCarbonFootprint;
    }

    // Sets the carbon footprint value directly
    public void setValue(double value) {
        this.currentCarbonFootprint = value;
    }


    // Getters and setters
    public double getTotalEmission() {
        return totalEmission;
    }

    public void setTotalEmission(double totalEmission) {
        this.totalEmission = totalEmission;
    }

    public double getMax() {
        return max;
    }

    public Map<String, Double> getTransportCarbon() {
        Map<String, Double> stringMap = new HashMap<>();
        for (Map.Entry<TrafficType, Double> entry : transportCarbon.entrySet()) {
            stringMap.put(entry.getKey().toString(), entry.getValue());
        }
        return stringMap;
    }

    public void setTransportCarbon(Map<String, Double> transportCarbon) {
        this.transportCarbon.clear(); // 清除当前的枚举映射
        for (Map.Entry<String, Double> entry : transportCarbon.entrySet()) {
            try {
                TrafficType type = TrafficType.valueOf(entry.getKey().toUpperCase()); // 将字符串转换为枚举
                this.transportCarbon.put(type, entry.getValue());
            } catch (IllegalArgumentException e) {
                System.err.println("Invalid traffic type: " + entry.getKey());
                // 可选: 处理或记录错误，或忽略无效的键
            }
        }
    }


}









