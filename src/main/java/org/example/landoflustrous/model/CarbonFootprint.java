package org.example.landoflustrous.model;

import java.util.Map;
import java.util.HashMap;

public class CarbonFootprint {
    private double totalEmission; // The total carbon emissions generated by the player
    private final double max; // Maximum carbon allowance for the user
    private double currentCarbonFootprint; // Current carbon footprint value of the user
    private Map<String, Double> transportCarbon; // Carbon consumption per unit distance of different transport methods

    // Constructor
    public CarbonFootprint(double max) {
        this.max = max;
        this.currentCarbonFootprint = 0.0; // Start with no carbon footprint
        this.totalEmission = 0.0;
        this.transportCarbon = new HashMap<>();

        // Define carbon consumption values per kilometer for each transport method
        this.transportCarbon.put("Walk", 0.5);
        this.transportCarbon.put("Bicycle", 1.0);
        this.transportCarbon.put("Bus", 2.0);
        this.transportCarbon.put("Luas", 3.0);
        this.transportCarbon.put("Taxi", 20.0);
    }

    // Methods
    // Increases the carbon footprint based on the transport method and distance traveled
    public void consumeCarbon(String transportMethod, double distance) {
        Double carbonPerKm = transportCarbon.get(transportMethod);
        if (carbonPerKm != null) {
            double consumedCarbon = carbonPerKm * distance;
            currentCarbonFootprint += consumedCarbon;
            totalEmission += consumedCarbon;

            // Ensure the current carbon footprint does not exceed the maximum allowed value
            if (currentCarbonFootprint > max) {
                currentCarbonFootprint = max;
            }
        } else {
            System.out.println("Unknown transport method: " + transportMethod);
        }
    }

    public void increase(double amount) {
        this.currentCarbonFootprint += amount;
        if (this.currentCarbonFootprint > this.max) {
            this.currentCarbonFootprint = this.max; // Ensuring it doesn't exceed the max limit
        }
    }

    // Gets the current carbon footprint value
    public double getValue() {
        return this.currentCarbonFootprint;
    }

    // Sets the carbon footprint value directly
    public void setValue(double value) {
        this.currentCarbonFootprint = value;
    }


    // Getters and setters
    public double getTotalEmission() {
        return totalEmission;
    }

    public void setTotalEmission(double totalEmission) {
        this.totalEmission = totalEmission;
    }

    public double getMax() {
        return max;
    }

    public Map<String, Double> getTransportCarbon() {
        return transportCarbon;
    }

    public void setTransportCarbon(Map<String, Double> transportCarbon) {
        this.transportCarbon = transportCarbon;
    }


}